{"version":3,"sources":["components/Header.js","components/Home.js","models/TodoModels.js","components/TodoForm.js","components/Todo.js","components/Todos.js","components/CreateTodoForm.js","containers/TodosContainer.js","config/routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","Home","class","URL","TodoModel","delete","todo","axios","_id","create","post","update","put","all","get","TodoForm","state","onChange","event","setState","target","value","onSubmit","preventDefault","props","body","updateTodo","toggleBodyForm","style","this","className","autoFocus","placeholder","type","Component","Todo","formStyle","display","deleteClickedTodo","deleteTodo","data-todos-index","onClick","Todos","todos","map","key","CreateTodoForm","onInputChange","onFormSubmit","createTodo","id","TodosContainer","fetchData","then","res","data","newTodo","completed","push","isUpdatedTodo","t","find","console","log","filter","Routes","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d88745e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Tasks</h1>\n      <nav>\n        <Link to='/'>Home</Link>\n        <Link to='/todos'>Todos</Link>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Home = () => {\n  return (\n    <h2 class='home-header'>\n      Your personal to-do list\n    </h2>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst URL = 'https://super-crud.herokuapp.com/todos';\n\nclass TodoModel {\n    static delete = (todo) => {\n        const request = axios.delete(`${URL}/${todo._id}`);\n        return request;\n    };\n\n    static create = (todo) => {\n        const request = axios.post(URL, todo);\n        return request;\n    };\n\n    static update = (todo) => {\n        const request = axios.put(`${URL}/${todo._id}`, todo);\n        return request;\n    };\n\n    static all = () => {\n        const request = axios.get(URL);\n        return request;\n    };\n};\n\nexport default TodoModel;\n","import React, { Component } from 'react';\n\nclass TodoForm extends Component {\n    state = {\n        todo: '',\n    }\n\n    onChange = (event) => {\n        this.setState({\n            todo: event.target.value,\n        });\n    };\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        const todo = this.props.todo;\n        todo.body = this.state.todo;\n        this.props.updateTodo(todo);\n        this.setState({ todo: '' });\n        this.props.toggleBodyForm();\n    };\n\n    render() {\n        return (\n            <div style={this.props.style} className='todoForm'>\n                <form onSubmit={ this.onSubmit }>\n                    <input\n                        autoFocus={ this.props.autoFocus }\n                        onChange={ this.onChange }\n                        placeholder='Write a todo here ...'\n                        type='text'\n                        value={ this.state.todo }\n                    />\n                    <button type='submit'>Save</button>\n                </form>\n            </div>\n        )\n    }\n};\n\nexport default TodoForm;\n","import React, { Component } from 'react';\nimport TodoForm from './TodoForm';\n\nclass Todo extends Component {\n    state ={\n        formStyle: {\n            display: 'none',\n        },\n    };\n\n    toggleBodyForm = () => {\n        this.state.formStyle.display === 'block'\n        ? this.setState({ formStyle: {display: 'none'} })\n        : this.setState({ formStyle: {display: 'block'} });\n    }\n\n    deleteClickedTodo = () => {\n        this.props.deleteTodo(this.props.todo);\n    };\n\n    render() {\n    return (\n        <li data-todos-index={this.props.todo._id}>\n        <div>\n            <span className=\"todo-item\">\n                {this.props.todo.body}</span>\n            <span\n                className='edit'\n                onClick={this.toggleBodyForm}>\n                <i class=\"fas fa-edit\"></i>\n            </span>\n            <span\n                className='remove'\n                onClick={this.deleteClickedTodo}>\n                <i class=\"far fa-trash-alt\"></i>\n            </span>\n            </div>\n            <TodoForm\n                todo={this.props.todo}\n                style={this.state.formStyle}\n                autoFocus={true}\n                updateTodo={this.props.updateTodo}\n                toggleBodyForm={this.toggleBodyForm}\n            />\n      </li>\n    );\n    };\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nconst Todos = (props) => {\n    const todos = props.todos.map((todo) => {\n        return (\n            <Todo\n                key={todo._id}\n                todo={todo}\n                updateTodo={props.updateTodo}\n                deleteTodo={props.deleteTodo}\n            />\n        );\n    });\n\n    return (\n        <ul>\n            {todos}\n        </ul>\n    );\n};\n\nexport default Todos;\n","import React, { Component } from 'react';\n\nclass CreateTodoForm extends Component {\n    state = {\n        todo: '',\n    };\n\n    onInputChange = (event) => {\n        this.setState({\n            todo: event.target.value,\n        });\n    };\n\n    onFormSubmit = (event) => {\n        event.preventDefault();\n        let todo = this.state.todo;\n        this.props.createTodo(todo);\n        this.setState({\n            todo: '',\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onFormSubmit} id=\"taskForm\">\n                    <input\n                        onChange={this.onInputChange}\n                        type='text' id='newItemDescription'\n                        placeholder='What do you need to do?'\n                        value={this.state.todo}\n                    />\n                    <button type='submit' id='addTask' className='btn'>Add Todo</button>\n                </form>\n            </div>\n        )\n    }\n\n};\n\nexport default CreateTodoForm;\n","import React, { Component } from 'react';\nimport TodoModel from '../models/TodoModels';\nimport Todos from '../components/Todos'\nimport CreateTodoForm from '../components/CreateTodoForm';\n\nclass TodosContainer extends Component {\n    state = {\n        todos: [],\n    }\n\n    componentDidMount(){\n        this.fetchData();\n    };\n\n    fetchData = () => {\n        TodoModel.all().then((res)=>{\n            this.setState({\n                todos: res.data.todos,\n            });\n        });\n    }\n\n    createTodo = (todo) => {\n        const newTodo = {\n            body: todo,\n            completed: false,\n        };\n\n        TodoModel.create(newTodo).then((res) => {\n            const todos = this.state.todos;\n            todos.push(res.data);\n            this.setState({ todos: todos });\n        });\n    };\n\n    updateTodo = todo => {\n        const isUpdatedTodo = t => {\n            return t._id === todo._id;\n        };\n\n        TodoModel.update(todo)\n            .then((res) => {\n                const todos = this.state.todos;\n                todos.find(isUpdatedTodo).body = todo.body;\n                this.setState({ todos: todos });\n            });\n    };\n\n    deleteTodo = (todo) => {\n        TodoModel.delete(todo).then((res) => {\n            console.log(todo)\n            const todos = this.state.todos.filter((todo) => {\n                console.log(todo)\n            return todo._id !== res.data._id;\n            });\n            this.setState({todos});\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"todosComponent\">\n            <CreateTodoForm\n                createTodo={this.createTodo}\n                />\n            <Todos\n                todos={this.state.todos}\n                updateTodo={this.updateTodo}\n                deleteTodo={this.deleteTodo}\n                />\n            </div>\n        );\n    };\n}\n\nexport default TodosContainer;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from '../components/Home';\nimport TodosContainer from '../containers/TodosContainer';\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={ Home }/>\n      <Route path='/todos' component={ TodosContainer }/>\n    </Switch>\n  )\n}\n\nexport default Routes;\n","import React from 'react';\nimport Header from './components/Header';\nimport Routes from './config/routes';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header/>\n      <Routes />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}